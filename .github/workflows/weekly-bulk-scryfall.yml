name: weekly-bulk-scryfall-import-DISABLED

# DISABLED - using lightweight-scryfall.yml instead due to 502 errors
# on:
#   schedule:
#     - cron: "0 2 * * 0" # every Sunday at 02:00 UTC
#   workflow_dispatch:

jobs:
  bulk-import:
    runs-on: ubuntu-latest
    steps:
      - name: Validate secrets
        run: |
          echo "DEBUG: BASE_URL length: ${#BASE_URL}"
          echo "DEBUG: BASE_URL value: [$BASE_URL]"
          if [ -z "$BASE_URL" ]; then
            echo "Error: BASE_URL is not set in repo secrets." >&2
            exit 1
          fi
          if [ -z "$CRON_KEY" ]; then
            echo "Error: CRON_KEY is not set in repo secrets." >&2
            exit 1
          fi
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_KEY: ${{ secrets.CRON_KEY }}
      - name: Bulk import Scryfall data
        run: |
          set -e
          
          # Try multiple possible API endpoint paths
          ENDPOINTS=(
            "$BASE_URL/api/cron/bulk-scryfall"
            "$BASE_URL/frontend/api/cron/bulk-scryfall"
          )
          
          SUCCESS=false
          
          for URL in "${ENDPOINTS[@]}"; do
            echo "DEBUG: Trying URL: [$URL]"
            echo "POST $URL"
            
            # First test the endpoint in test mode (quick validation)
            echo "Testing endpoint in test mode..."
            TEST_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
              -X POST \
              -H "x-cron-key: $CRON_KEY" \
              -H "x-test-mode: true" \
              -H "Content-Type: application/json" \
              --max-time 30 \
              "$URL" 2>&1 || echo "CURL_ERROR")
            
            TEST_HTTP_CODE=$(echo "$TEST_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 || echo "000")
            TEST_RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed '/HTTP_CODE:/d')
            
            echo "Test response code: $TEST_HTTP_CODE"
            echo "Test response body: $TEST_RESPONSE_BODY"
            
            if [ "$TEST_HTTP_CODE" -eq "200" ] || [ "$TEST_HTTP_CODE" -eq "201" ]; then
              echo "✅ Test successful! Found working endpoint: $URL"
              echo "Starting streaming bulk import (processes 1K cards at a time to prevent timeouts)..."
              
              # Use streaming mode (single request, server handles batching)
              STREAM_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
                -X POST \
                -H "x-cron-key: $CRON_KEY" \
                -H "x-use-streaming: true" \
                -H "Content-Type: application/json" \
                --max-time 300 \
                "$URL" 2>&1 || echo "CURL_ERROR")
              
              STREAM_HTTP_CODE=$(echo "$STREAM_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 || echo "000")
              STREAM_RESPONSE_BODY=$(echo "$STREAM_RESPONSE" | sed '/HTTP_CODE:/d')
              
              echo "Streaming response code: $STREAM_HTTP_CODE"
              echo "Streaming response: $STREAM_RESPONSE_BODY"
              
              if [ "$STREAM_HTTP_CODE" -eq "200" ] || [ "$STREAM_HTTP_CODE" -eq "201" ]; then
                # Extract processing information
                CARDS_PROCESSED=$(echo "$STREAM_RESPONSE_BODY" | grep -o '"imported":[0-9]*' | cut -d: -f2 || echo "0")
                TOTAL_CARDS=$(echo "$STREAM_RESPONSE_BODY" | grep -o '"total_cards":[0-9]*' | cut -d: -f2 || echo "unknown")
                
                echo "✅ Streaming import completed successfully!"
                echo "Cards processed: $CARDS_PROCESSED out of $TOTAL_CARDS total"
                SUCCESS=true
                break
              else
                echo "❌ Streaming import failed with code: $STREAM_HTTP_CODE"
                echo "Response: $STREAM_RESPONSE_BODY"
                
                # Fallback to chunked mode if streaming fails
                echo "Attempting fallback to chunked mode..."
                
                FALLBACK_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
                  -X POST \
                  -H "x-cron-key: $CRON_KEY" \
                  -H "x-use-streaming: false" \
                  -H "x-chunk-start: 0" \
                  -H "x-chunk-size: 1000" \
                  -H "Content-Type: application/json" \
                  --max-time 300 \
                  "$URL" 2>&1 || echo "CURL_ERROR")
                
                FALLBACK_HTTP_CODE=$(echo "$FALLBACK_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 || echo "000")
                
                if [ "$FALLBACK_HTTP_CODE" -eq "200" ] || [ "$FALLBACK_HTTP_CODE" -eq "201" ]; then
                  echo "✅ Fallback chunked mode worked!"
                  SUCCESS=true
                  break
                else
                  echo "❌ Both streaming and fallback failed"
                fi
              fi
            elif [ "$TEST_HTTP_CODE" -eq "404" ]; then
              echo "❌ 404 Not Found - trying next endpoint"
            elif [ "$TEST_HTTP_CODE" -eq "401" ]; then
              echo "❌ 401 Unauthorized - check CRON_KEY secret"
              exit 1
            else
              echo "❌ Unexpected test response code: $TEST_HTTP_CODE"
              echo "Test response body: $TEST_RESPONSE_BODY"
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "❌ All endpoints failed. Please check:"
            echo "   - BASE_URL secret points to correct domain"
            echo "   - API routes are deployed correctly"
            echo "   - CRON_KEY secret is set correctly"
            exit 1
          fi
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_KEY: ${{ secrets.CRON_KEY }}