name: weekly-bulk-scryfall-import

on:
  schedule:
    - cron: "0 2 * * 0" # every Sunday at 02:00 UTC
  workflow_dispatch:

jobs:
  bulk-import:
    runs-on: ubuntu-latest
    steps:
      - name: Validate secrets
        run: |
          echo "DEBUG: BASE_URL length: ${#BASE_URL}"
          echo "DEBUG: BASE_URL value: [$BASE_URL]"
          if [ -z "$BASE_URL" ]; then
            echo "Error: BASE_URL is not set in repo secrets." >&2
            exit 1
          fi
          if [ -z "$CRON_KEY" ]; then
            echo "Error: CRON_KEY is not set in repo secrets." >&2
            exit 1
          fi
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_KEY: ${{ secrets.CRON_KEY }}
      - name: Bulk import Scryfall data
        run: |
          set -e
          
          # Try multiple possible API endpoint paths
          ENDPOINTS=(
            "$BASE_URL/api/cron/bulk-scryfall"
            "$BASE_URL/frontend/api/cron/bulk-scryfall"
          )
          
          SUCCESS=false
          
          for URL in "${ENDPOINTS[@]}"; do
            echo "DEBUG: Trying URL: [$URL]"
            echo "POST $URL"
            
            # First test the endpoint in test mode (quick validation)
            echo "Testing endpoint in test mode..."
            TEST_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
              -X POST \
              -H "x-cron-key: $CRON_KEY" \
              -H "x-test-mode: true" \
              -H "Content-Type: application/json" \
              --max-time 30 \
              "$URL" 2>&1 || echo "CURL_ERROR")
            
            TEST_HTTP_CODE=$(echo "$TEST_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 || echo "000")
            TEST_RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed '/HTTP_CODE:/d')
            
            echo "Test response code: $TEST_HTTP_CODE"
            echo "Test response body: $TEST_RESPONSE_BODY"
            
            if [ "$TEST_HTTP_CODE" -eq "200" ] || [ "$TEST_HTTP_CODE" -eq "201" ]; then
              echo "✅ Test successful! Found working endpoint: $URL"
              echo "Starting chunked bulk import (processing in 5K card chunks to prevent timeouts)..."
              
              # Process in chunks of 5000 cards each
              CHUNK_SIZE=5000
              CHUNK_START=0
              TOTAL_PROCESSED=0
              CHUNK_SUCCESS=true
              
              while [ "$CHUNK_SUCCESS" = true ]; do
                echo "Processing chunk starting at: $CHUNK_START"
                
                CHUNK_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
                  -X POST \
                  -H "x-cron-key: $CRON_KEY" \
                  -H "x-chunk-start: $CHUNK_START" \
                  -H "x-chunk-size: $CHUNK_SIZE" \
                  -H "Content-Type: application/json" \
                  --max-time 300 \
                  "$URL" 2>&1 || echo "CURL_ERROR")
                
                CHUNK_HTTP_CODE=$(echo "$CHUNK_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 || echo "000")
                CHUNK_RESPONSE_BODY=$(echo "$CHUNK_RESPONSE" | sed '/HTTP_CODE:/d')
                
                echo "Chunk response code: $CHUNK_HTTP_CODE"
                echo "Chunk response: $CHUNK_RESPONSE_BODY"
                
                if [ "$CHUNK_HTTP_CODE" -eq "200" ] || [ "$CHUNK_HTTP_CODE" -eq "201" ]; then
                  # Extract chunk information from response
                  IS_LAST_CHUNK=$(echo "$CHUNK_RESPONSE_BODY" | grep -o '"is_last_chunk":true' || echo "")
                  CHUNK_PROCESSED=$(echo "$CHUNK_RESPONSE_BODY" | grep -o '"imported":[0-9]*' | cut -d: -f2 || echo "0")
                  
                  TOTAL_PROCESSED=$((TOTAL_PROCESSED + CHUNK_PROCESSED))
                  echo "✅ Chunk completed! Processed: $CHUNK_PROCESSED cards. Total so far: $TOTAL_PROCESSED"
                  
                  if [ -n "$IS_LAST_CHUNK" ]; then
                    echo "✅ All chunks completed! Total cards processed: $TOTAL_PROCESSED"
                    SUCCESS=true
                    break
                  else
                    CHUNK_START=$((CHUNK_START + CHUNK_SIZE))
                    echo "Moving to next chunk starting at: $CHUNK_START"
                  fi
                else
                  echo "❌ Chunk failed with code: $CHUNK_HTTP_CODE"
                  echo "Response: $CHUNK_RESPONSE_BODY"
                  CHUNK_SUCCESS=false
                fi
              done
              
              if [ "$CHUNK_SUCCESS" = false ]; then
                echo "❌ Chunked import failed"
              else
                echo "✅ Bulk import completed successfully!"
                SUCCESS=true
                break
              fi
            elif [ "$TEST_HTTP_CODE" -eq "404" ]; then
              echo "❌ 404 Not Found - trying next endpoint"
            elif [ "$TEST_HTTP_CODE" -eq "401" ]; then
              echo "❌ 401 Unauthorized - check CRON_KEY secret"
              exit 1
            else
              echo "❌ Unexpected test response code: $TEST_HTTP_CODE"
              echo "Test response body: $TEST_RESPONSE_BODY"
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "❌ All endpoints failed. Please check:"
            echo "   - BASE_URL secret points to correct domain"
            echo "   - API routes are deployed correctly"
            echo "   - CRON_KEY secret is set correctly"
            exit 1
          fi
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          CRON_KEY: ${{ secrets.CRON_KEY }}